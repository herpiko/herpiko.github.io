{"version":3,"sources":["photos.js","App.js","serviceWorker.js","index.js"],"names":["photos","App","useState","currentImage","setCurrentImage","viewerIsOpen","setViewerIsOpen","openLightbox","useCallback","event","photo","index","onClick","onClose","currentIndex","views","map","x","srcset","srcSet","caption","title","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2LAAaA,EAAS,CAAC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,sCAAsC,CAAC,IAAM,qCAAqC,CAAC,IAAM,qCAAqC,CAAC,IAAM,sCCwCrkCC,MAlCf,WAAgB,IAAD,EAC2BC,mBAAS,GADpC,mBACNC,EADM,KACQC,EADR,OAE2BF,oBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,KAIPC,EAAeC,uBAAY,SAACC,EAAD,GAA2B,EAAlBC,MAAmB,IAAZC,EAAW,EAAXA,MAC/CP,EAAgBO,GAChBL,GAAgB,KACf,IAOH,OACE,6BACE,kBAAC,IAAD,CAASN,OAAQA,EAAQY,QAASL,IAClC,kBAAC,IAAD,KACGF,EACC,kBAAC,IAAD,CAAOQ,QAVO,WACpBT,EAAgB,GAChBE,GAAgB,KASR,kBAAC,IAAD,CACEQ,aAAcX,EACdY,MAAOf,EAAOgB,KAAI,SAAAC,GAAC,sBACdA,EADc,CAEjBC,OAAQD,EAAEE,OACVC,QAASH,EAAEI,cAIf,QCvBQC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.5de5646b.chunk.js","sourcesContent":["export const photos = [{\"src\":\"/photos/10Hc0PJI52wTNbmWgzgqLR.png\"},{\"src\":\"/photos/12WLSmmP3kubXPLnK6WMr7.png\"},{\"src\":\"/photos/1QmEqURhBHiCBvMsVljDrC.png\"},{\"src\":\"/photos/1Sm9OINwnp8pYUVbh8Peil.png\"},{\"src\":\"/photos/1cPmiiqmkDLzZxy1B2T2Lx.png\"},{\"src\":\"/photos/1rE2SficguIz0cR1GJvUMp.png\"},{\"src\":\"/photos/1sNmbCnD1wZ0t7H9ME5sji.png\"},{\"src\":\"/photos/26UrRH54oOtKsvrPROUYYg.png\"},{\"src\":\"/photos/29NCUoWnlCbODnWZompQaF.png\"},{\"src\":\"/photos/2DbbgEMlP1b1HShW73lDFz.png\"},{\"src\":\"/photos/2ShdGepCK5pCvHZ407761d.png\"},{\"src\":\"/photos/2oVthBwl0edsoCYDVx5ciS.png\"},{\"src\":\"/photos/2s0FGsJ2FrnsZkAiaapCxN.png\"},{\"src\":\"/photos/33APDlbojgmdopq75iN8Tv.png\"},{\"src\":\"/photos/3ELPTHfo6gstOrKIMgE3K9.png\"},{\"src\":\"/photos/3mkBcMbA23nDPkF4dPTEEf.png\"},{\"src\":\"/photos/4Jz7s8DLHbBGL4lmwwuG9J.png\"},{\"src\":\"/photos/5VcyZR3bmlCAMOapToKnGi.png\"},{\"src\":\"/photos/5byZWl3dlAFkWwvH9k3QuG.png\"},{\"src\":\"/photos/5xxNrms3IJTVKSTH1UMguI.png\"},{\"src\":\"/photos/6V9BvNkL8MzT5R4ETNnXjC.png\"},{\"src\":\"/photos/7eox0zLgBbG0hGlMATgwCW.png\"},{\"src\":\"/photos/ADh4kWLWA7sF91tckxvCV.png\"},{\"src\":\"/photos/mx0SrYJT6CkVqFz81t8hU.png\"},{\"src\":\"/photos/w8gM1K0Lc07U9GSKCnizA.png\"}]","import React, {useState, useCallback} from 'react';\nimport {render} from 'react-dom';\nimport Gallery from 'react-photo-gallery';\nimport Carousel, {Modal, ModalGateway} from 'react-images';\nimport {photos} from './photos';\n\nfunction App() {\n  const [currentImage, setCurrentImage] = useState(0);\n  const [viewerIsOpen, setViewerIsOpen] = useState(false);\n\n  const openLightbox = useCallback((event, {photo, index}) => {\n    setCurrentImage(index);\n    setViewerIsOpen(true);\n  }, []);\n\n  const closeLightbox = () => {\n    setCurrentImage(0);\n    setViewerIsOpen(false);\n  };\n\n  return (\n    <div>\n      <Gallery photos={photos} onClick={openLightbox} />\n      <ModalGateway>\n        {viewerIsOpen ? (\n          <Modal onClose={closeLightbox}>\n            <Carousel\n              currentIndex={currentImage}\n              views={photos.map(x => ({\n                ...x,\n                srcset: x.srcSet,\n                caption: x.title,\n              }))}\n            />\n          </Modal>\n        ) : null}\n      </ModalGateway>\n    </div>\n  );\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}